
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 02 12:27:13 CEST 2014
//----------------------------------------------------

package edu.pjwstk.demo.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.DefaultSymbolFactory;
import java_cup.runtime.Symbol;
import edu.pjwstk.demo.expression.*;
import edu.pjwstk.demo.expression.terminal.*;
import edu.pjwstk.demo.expression.binary.*;
import edu.pjwstk.demo.expression.unary.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 02 12:27:13 CEST 2014
  */
public class ExpressionParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ExpressionParser() {super();}

  /** Constructor which sets the default scanner. */
  public ExpressionParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ExpressionParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\004\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\005\000\002\003" +
    "\005\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\020\004\014\005\004\006\005\007\007\010" +
    "\010\020\013\037\006\001\002\000\060\002\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\040\uffea\001\002\000\060\002\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\040" +
    "\uffe9\001\002\000\020\004\014\005\004\006\005\007\007" +
    "\010\010\020\013\037\006\001\002\000\060\002\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\040\uffe8\001\002\000\060\002\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\040\uffe7\001\002\000\004\002\070\001\002\000\056\002" +
    "\000\011\020\012\034\013\017\014\032\015\026\016\040" +
    "\017\023\021\016\022\021\023\041\024\033\025\031\026" +
    "\037\027\025\030\024\031\042\032\022\033\036\034\027" +
    "\035\035\036\030\001\002\000\020\004\014\005\004\006" +
    "\005\007\007\010\010\020\013\037\006\001\002\000\060" +
    "\002\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\040\uffeb\001\002\000\060\002\ufff6" +
    "\011\020\012\034\013\017\014\032\015\026\016\ufff6\017" +
    "\ufff6\021\ufff6\022\ufff6\023\041\024\033\025\031\026\037" +
    "\027\025\030\024\031\042\032\022\033\036\034\027\035" +
    "\035\036\030\040\ufff6\001\002\000\020\004\014\005\004" +
    "\006\005\007\007\010\010\020\013\037\006\001\002\000" +
    "\020\004\014\005\004\006\005\007\007\010\010\020\013" +
    "\037\006\001\002\000\020\004\014\005\004\006\005\007" +
    "\007\010\010\020\013\037\006\001\002\000\020\004\014" +
    "\005\004\006\005\007\007\010\010\020\013\037\006\001" +
    "\002\000\020\004\014\005\004\006\005\007\007\010\010" +
    "\020\013\037\006\001\002\000\020\004\014\005\004\006" +
    "\005\007\007\010\010\020\013\037\006\001\002\000\020" +
    "\004\014\005\004\006\005\007\007\010\010\020\013\037" +
    "\006\001\002\000\020\004\014\005\004\006\005\007\007" +
    "\010\010\020\013\037\006\001\002\000\020\004\014\005" +
    "\004\006\005\007\007\010\010\020\013\037\006\001\002" +
    "\000\020\004\014\005\004\006\005\007\007\010\010\020" +
    "\013\037\006\001\002\000\020\004\014\005\004\006\005" +
    "\007\007\010\010\020\013\037\006\001\002\000\020\004" +
    "\014\005\004\006\005\007\007\010\010\020\013\037\006" +
    "\001\002\000\020\004\014\005\004\006\005\007\007\010" +
    "\010\020\013\037\006\001\002\000\020\004\014\005\004" +
    "\006\005\007\007\010\010\020\013\037\006\001\002\000" +
    "\020\004\014\005\004\006\005\007\007\010\010\020\013" +
    "\037\006\001\002\000\020\004\014\005\004\006\005\007" +
    "\007\010\010\020\013\037\006\001\002\000\020\004\014" +
    "\005\004\006\005\007\007\010\010\020\013\037\006\001" +
    "\002\000\020\004\014\005\004\006\005\007\007\010\010" +
    "\020\013\037\006\001\002\000\020\004\014\005\004\006" +
    "\005\007\007\010\010\020\013\037\006\001\002\000\020" +
    "\004\014\005\004\006\005\007\007\010\010\020\013\037" +
    "\006\001\002\000\020\004\014\005\004\006\005\007\007" +
    "\010\010\020\013\037\006\001\002\000\060\002\uffef\011" +
    "\020\012\034\013\017\014\032\015\026\016\uffef\017\uffef" +
    "\021\uffef\022\uffef\023\041\024\033\025\031\026\037\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\027\035\035" +
    "\036\030\040\uffef\001\002\000\060\002\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\035\036\030" +
    "\040\ufff5\001\002\000\060\002\ufff8\011\020\012\034\013" +
    "\017\014\032\015\026\016\ufff8\017\023\021\ufff8\022\ufff8" +
    "\023\041\024\033\025\031\026\037\027\025\030\024\031" +
    "\042\032\022\033\036\034\027\035\035\036\030\040\ufff8" +
    "\001\002\000\060\002\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\035\036\030\040\ufff2\001\002" +
    "\000\060\002\uffed\011\020\012\034\013\017\014\032\015" +
    "\026\016\uffed\017\uffed\021\uffed\022\uffed\023\041\024\033" +
    "\025\031\026\037\027\uffed\030\uffed\031\uffed\032\uffed\033" +
    "\uffed\034\027\035\035\036\030\040\uffed\001\002\000\060" +
    "\002\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\030\040\uffe6\001\002\000\060\002\ufffe" +
    "\011\ufffe\012\ufffe\013\017\014\032\015\026\016\ufffe\017" +
    "\ufffe\021\ufffe\022\ufffe\023\041\024\033\025\031\026\037" +
    "\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\035\036\030\040\ufffe\001\002\000\060\002\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\035\036" +
    "\030\040\ufff4\001\002\000\060\002\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\021\ufffc\022" +
    "\ufffc\023\041\024\033\025\031\026\037\027\ufffc\030\ufffc" +
    "\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\035\036\030\040" +
    "\ufffc\001\002\000\060\002\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\035\036\030\040\ufff3\001" +
    "\002\000\060\002\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\040\uffe5\001\002\000" +
    "\060\002\uffec\011\020\012\034\013\017\014\032\015\026" +
    "\016\uffec\017\uffec\021\uffec\022\uffec\023\041\024\033\025" +
    "\031\026\037\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\035\036\030\040\uffec\001\002\000\060\002" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\021\ufffb\022\ufffb\023\041\024\033\025\031\026" +
    "\037\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\035\035\036\030\040\ufffb\001\002\000\060\002\ufff1\011" +
    "\020\012\034\013\017\014\032\015\026\016\ufff1\017\ufff1" +
    "\021\ufff1\022\ufff1\023\041\024\033\025\031\026\037\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\027\035\035" +
    "\036\030\040\ufff1\001\002\000\060\002\ufff0\011\020\012" +
    "\034\013\017\014\032\015\026\016\ufff0\017\ufff0\021\ufff0" +
    "\022\ufff0\023\041\024\033\025\031\026\037\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\027\035\035\036\030" +
    "\040\ufff0\001\002\000\060\002\ufff7\011\020\012\034\013" +
    "\017\014\032\015\026\016\ufff7\017\ufff7\021\ufff7\022\ufff7" +
    "\023\041\024\033\025\031\026\037\027\025\030\024\031" +
    "\042\032\022\033\036\034\027\035\035\036\030\040\ufff7" +
    "\001\002\000\060\002\uffee\011\020\012\034\013\017\014" +
    "\032\015\026\016\uffee\017\uffee\021\uffee\022\uffee\023\041" +
    "\024\033\025\031\026\037\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\027\035\035\036\030\040\uffee\001\002" +
    "\000\060\002\ufffa\011\020\012\034\013\017\014\032\015" +
    "\026\016\040\017\023\021\016\022\ufffa\023\041\024\033" +
    "\025\031\026\037\027\025\030\024\031\042\032\022\033" +
    "\036\034\027\035\035\036\030\040\ufffa\001\002\000\060" +
    "\002\uffff\011\uffff\012\uffff\013\017\014\032\015\026\016" +
    "\uffff\017\uffff\021\uffff\022\uffff\023\041\024\033\025\031" +
    "\026\037\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\035\036\030\040\uffff\001\002\000\060\002\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\021\ufffd\022\ufffd\023\041\024\033\025\031\026\037" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035" +
    "\035\036\030\040\ufffd\001\002\000\060\002\ufff9\011\020" +
    "\012\034\013\017\014\032\015\026\016\ufff9\017\023\021" +
    "\ufff9\022\ufff9\023\041\024\033\025\031\026\037\027\025" +
    "\030\024\031\042\032\022\033\036\034\027\035\035\036" +
    "\030\040\ufff9\001\002\000\004\002\001\001\002\000\056" +
    "\011\020\012\034\013\017\014\032\015\026\016\040\017" +
    "\023\021\016\022\021\023\041\024\033\025\031\026\037" +
    "\027\025\030\024\031\042\032\022\033\036\034\027\035" +
    "\035\036\030\040\072\001\002\000\060\002\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\040\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\006\002\010\003\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\066\001\001\000\004\003\065\001" +
    "\001\000\004\003\064\001\001\000\004\003\063\001\001" +
    "\000\004\003\062\001\001\000\004\003\061\001\001\000" +
    "\004\003\060\001\001\000\004\003\057\001\001\000\004" +
    "\003\056\001\001\000\004\003\055\001\001\000\004\003" +
    "\054\001\001\000\004\003\053\001\001\000\004\003\052" +
    "\001\001\000\004\003\051\001\001\000\004\003\050\001" +
    "\001\000\004\003\047\001\001\000\004\003\046\001\001" +
    "\000\004\003\045\001\001\000\004\003\044\001\001\000" +
    "\004\003\043\001\001\000\004\003\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ExpressionParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ExpressionParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ExpressionParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 	    lexer = new Lexer(new StringReader(expressionText)); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
		return lexer.next_token(); 
    }


	public Lexer lexer;
	private String expressionText;
	public Expression RESULT;

	public ExpressionParser(String expressionText) {
		this.symbolFactory = new DefaultSymbolFactory();
		this.expressionText = expressionText;
	}

	void setResult(Expression expression) {
		this.RESULT = expression;
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ExpressionParser$actions {
  private final ExpressionParser parser;

  /** Constructor */
  CUP$ExpressionParser$actions(ExpressionParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ExpressionParser$do_action(
    int                        CUP$ExpressionParser$act_num,
    java_cup.runtime.lr_parser CUP$ExpressionParser$parser,
    java.util.Stack            CUP$ExpressionParser$stack,
    int                        CUP$ExpressionParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ExpressionParser$result;

      /* select the action based on the action number */
      switch (CUP$ExpressionParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		 RESULT = e1; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr COMMA expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new CommaExpression             (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr DOT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new DotExpression               (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new NameExpression      ((String)o);   
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new StringExpression    ((String)o);   
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new BooleanExpression   ((Boolean)o);  
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= DOUBLE_LITERAL 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Double o = (Double)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new DoubleExpression    ((Double)o);   
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new IntegerExpression   ((Integer)o);  
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr EQUALS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new EqualsExpression            (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr NOT_EQUALS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new NotEqualsExpression         (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr LESS_EQUAL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new LessOrEqualThanExpression   (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr LESS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new LessThanExpression          (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr GREATER_EQUAL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new GreaterOrEqualThanExpression(e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr GREATER expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new GreaterThanExpression       (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr MINUS_SET expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new MinusSetExpression          (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr INTERSECT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new IntersectExpression         (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr UNION expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new UnionExpression             (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr JOIN expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new JoinExpression              (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new NotExpression               (e1);     
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr IN expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new InExpression                (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr XOR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new XORExpression               (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new AndExpression               (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new OrExpression                (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MODULO expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new ModuloExpression            (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr DIVIDE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new DivideExpression            (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr MULTIPLY expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new MultiplyExpression          (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new MinusExpression             (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new PlusExpression              (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = e; parser.setResult(e); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		Expression start_val = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		RESULT = start_val;
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ExpressionParser$parser.done_parsing();
          return CUP$ExpressionParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

