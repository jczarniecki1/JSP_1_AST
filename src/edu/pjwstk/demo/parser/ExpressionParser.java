
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 02 22:05:58 CEST 2014
//----------------------------------------------------

package edu.pjwstk.demo.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.DefaultSymbolFactory;
import java_cup.runtime.Symbol;
import edu.pjwstk.demo.expression.*;
import edu.pjwstk.demo.expression.terminal.*;
import edu.pjwstk.demo.expression.binary.*;
import edu.pjwstk.demo.expression.unary.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 02 22:05:58 CEST 2014
  */
public class ExpressionParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ExpressionParser() {super();}

  /** Constructor which sets the default scanner. */
  public ExpressionParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ExpressionParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\005\000" +
    "\002\003\005\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\034\004\022\005\006\006\007\007\013\010" +
    "\015\017\014\021\020\037\012\040\021\041\004\042\005" +
    "\043\010\046\011\001\002\000\034\004\022\005\006\006" +
    "\007\007\013\010\015\017\014\021\020\037\012\040\021" +
    "\041\004\042\005\043\010\046\011\001\002\000\034\004" +
    "\022\005\006\006\007\007\013\010\015\017\014\021\020" +
    "\037\012\040\021\041\004\042\005\043\010\046\011\001" +
    "\002\000\062\002\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\044\uffe3\045\uffe3\047\uffe3\001" +
    "\002\000\062\002\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\044\uffe2\045\uffe2\047\uffe2\001" +
    "\002\000\034\004\022\005\006\006\007\007\013\010\015" +
    "\017\014\021\020\037\012\040\021\041\004\042\005\043" +
    "\010\046\011\001\002\000\034\004\022\005\006\006\007" +
    "\007\013\010\015\017\014\021\020\037\012\040\021\041" +
    "\004\042\005\043\010\046\011\001\002\000\034\004\022" +
    "\005\006\006\007\007\013\010\015\017\014\021\020\037" +
    "\012\040\021\041\004\042\005\043\010\046\011\001\002" +
    "\000\062\002\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\044\uffe1\045\uffe1\047\uffe1\001\002" +
    "\000\034\004\022\005\006\006\007\007\013\010\015\017" +
    "\014\021\020\037\012\040\021\041\004\042\005\043\010" +
    "\046\011\001\002\000\062\002\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\044\uffe0\045\uffe0" +
    "\047\uffe0\001\002\000\004\002\101\001\002\000\060\002" +
    "\000\011\027\012\043\013\026\014\041\015\035\016\047" +
    "\020\032\022\025\023\030\024\024\025\050\026\042\027" +
    "\040\030\046\031\034\032\033\033\051\034\031\035\044" +
    "\036\036\044\045\045\037\001\002\000\034\004\022\005" +
    "\006\006\007\007\013\010\015\017\014\021\020\037\012" +
    "\040\021\041\004\042\005\043\010\046\011\001\002\000" +
    "\034\004\022\005\006\006\007\007\013\010\015\017\014" +
    "\021\020\037\012\040\021\041\004\042\005\043\010\046" +
    "\011\001\002\000\062\002\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\020\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\044\uffe4\045\uffe4\047" +
    "\uffe4\001\002\000\062\002\ufff9\011\027\012\043\013\026" +
    "\014\041\015\035\016\ufff9\020\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\050\026\042\027\040\030\046\031\ufff9\032\ufff9" +
    "\033\ufff9\034\ufff9\035\ufff9\036\036\044\045\045\037\047" +
    "\ufff9\001\002\000\034\004\022\005\006\006\007\007\013" +
    "\010\015\017\014\021\020\037\012\040\021\041\004\042" +
    "\005\043\010\046\011\001\002\000\034\004\022\005\006" +
    "\006\007\007\013\010\015\017\014\021\020\037\012\040" +
    "\021\041\004\042\005\043\010\046\011\001\002\000\034" +
    "\004\022\005\006\006\007\007\013\010\015\017\014\021" +
    "\020\037\012\040\021\041\004\042\005\043\010\046\011" +
    "\001\002\000\034\004\022\005\006\006\007\007\013\010" +
    "\015\017\014\021\020\037\012\040\021\041\004\042\005" +
    "\043\010\046\011\001\002\000\034\004\022\005\006\006" +
    "\007\007\013\010\015\017\014\021\020\037\012\040\021" +
    "\041\004\042\005\043\010\046\011\001\002\000\034\004" +
    "\022\005\006\006\007\007\013\010\015\017\014\021\020" +
    "\037\012\040\021\041\004\042\005\043\010\046\011\001" +
    "\002\000\034\004\022\005\006\006\007\007\013\010\015" +
    "\017\014\021\020\037\012\040\021\041\004\042\005\043" +
    "\010\046\011\001\002\000\034\004\022\005\006\006\007" +
    "\007\013\010\015\017\014\021\020\037\012\040\021\041" +
    "\004\042\005\043\010\046\011\001\002\000\034\004\022" +
    "\005\006\006\007\007\013\010\015\017\014\021\020\037" +
    "\012\040\021\041\004\042\005\043\010\046\011\001\002" +
    "\000\034\004\022\005\006\006\007\007\013\010\015\017" +
    "\014\021\020\037\012\040\021\041\004\042\005\043\010" +
    "\046\011\001\002\000\034\004\022\005\006\006\007\007" +
    "\013\010\015\017\014\021\020\037\012\040\021\041\004" +
    "\042\005\043\010\046\011\001\002\000\034\004\022\005" +
    "\006\006\007\007\013\010\015\017\014\021\020\037\012" +
    "\040\021\041\004\042\005\043\010\046\011\001\002\000" +
    "\034\004\022\005\006\006\007\007\013\010\015\017\014" +
    "\021\020\037\012\040\021\041\004\042\005\043\010\046" +
    "\011\001\002\000\034\004\022\005\006\006\007\007\013" +
    "\010\015\017\014\021\020\037\012\040\021\041\004\042" +
    "\005\043\010\046\011\001\002\000\034\004\022\005\006" +
    "\006\007\007\013\010\015\017\014\021\020\037\012\040" +
    "\021\041\004\042\005\043\010\046\011\001\002\000\034" +
    "\004\022\005\006\006\007\007\013\010\015\017\014\021" +
    "\020\037\012\040\021\041\004\042\005\043\010\046\011" +
    "\001\002\000\034\004\022\005\006\006\007\007\013\010" +
    "\015\017\014\021\020\037\012\040\021\041\004\042\005" +
    "\043\010\046\011\001\002\000\034\004\022\005\006\006" +
    "\007\007\013\010\015\017\014\021\020\037\012\040\021" +
    "\041\004\042\005\043\010\046\011\001\002\000\034\004" +
    "\022\005\006\006\007\007\013\010\015\017\014\021\020" +
    "\037\012\040\021\041\004\042\005\043\010\046\011\001" +
    "\002\000\034\004\022\005\006\006\007\007\013\010\015" +
    "\017\014\021\020\037\012\040\021\041\004\042\005\043" +
    "\010\046\011\001\002\000\034\004\022\005\006\006\007" +
    "\007\013\010\015\017\014\021\020\037\012\040\021\041" +
    "\004\042\005\043\010\046\011\001\002\000\034\004\022" +
    "\005\006\006\007\007\013\010\015\017\014\021\020\037" +
    "\012\040\021\041\004\042\005\043\010\046\011\001\002" +
    "\000\062\002\uffe8\011\027\012\043\013\026\014\041\015" +
    "\035\016\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\025\050" +
    "\026\042\027\040\030\046\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\036\044\045\045\037\047\uffe8\001\002" +
    "\000\062\002\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\044\045\045\037\047\uffee\001\002" +
    "\000\062\002\ufff3\011\027\012\043\013\026\014\041\015" +
    "\035\016\ufff3\020\032\022\ufff3\023\ufff3\024\024\025\050" +
    "\026\042\027\040\030\046\031\034\032\033\033\051\034" +
    "\031\035\044\036\036\044\045\045\037\047\ufff3\001\002" +
    "\000\062\002\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\044\045\045\037\047\uffeb\001\002" +
    "\000\062\002\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\044\uffdf\045\037\047\uffdf\001\002" +
    "\000\062\002\uffe6\011\027\012\043\013\026\014\041\015" +
    "\035\016\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025\050" +
    "\026\042\027\040\030\046\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\036\044\045\045\037\047\uffe6\001\002" +
    "\000\062\002\ufffe\011\ufffe\012\ufffe\013\026\014\041\015" +
    "\035\016\ufffe\020\ufffe\022\ufffe\023\ufffe\024\ufffe\025\050" +
    "\026\042\027\040\030\046\031\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\035\ufffe\036\ufffe\044\045\045\037\047\ufffe\001\002" +
    "\000\062\002\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\020\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\044\045\045\037\047\uffed\001\002" +
    "\000\062\002\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\020\ufffc\022\ufffc\023\ufffc\024\ufffc\025\050" +
    "\026\042\027\040\030\046\031\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\036\ufffc\044\045\045\037\047\ufffc\001\002" +
    "\000\062\002\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\020\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\044\045\045\037\047\uffec\001\002" +
    "\000\062\002\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\044\uffde\045\uffde\047\uffde\001\002" +
    "\000\062\002\uffe5\011\027\012\043\013\026\014\041\015" +
    "\035\016\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5\025\050" +
    "\026\042\027\040\030\046\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\044\045\045\037\047\uffe5\001\002" +
    "\000\062\002\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\020\ufffb\022\ufffb\023\ufffb\024\ufffb\025\050" +
    "\026\042\027\040\030\046\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\044\045\045\037\047\ufffb\001\002" +
    "\000\062\002\uffea\011\027\012\043\013\026\014\041\015" +
    "\035\016\uffea\020\uffea\022\uffea\023\uffea\024\uffea\025\050" +
    "\026\042\027\040\030\046\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\036\044\045\045\037\047\uffea\001\002" +
    "\000\062\002\uffe9\011\027\012\043\013\026\014\041\015" +
    "\035\016\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\025\050" +
    "\026\042\027\040\030\046\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\036\044\045\045\037\047\uffe9\001\002" +
    "\000\062\002\ufff2\011\027\012\043\013\026\014\041\015" +
    "\035\016\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025\050" +
    "\026\042\027\040\030\046\031\034\032\033\033\051\034" +
    "\031\035\044\036\036\044\045\045\037\047\ufff2\001\002" +
    "\000\062\002\uffe7\011\027\012\043\013\026\014\041\015" +
    "\035\016\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\025\050" +
    "\026\042\027\040\030\046\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\036\044\045\045\037\047\uffe7\001\002" +
    "\000\062\002\ufff5\011\027\012\043\013\026\014\041\015" +
    "\035\016\047\020\032\022\025\023\ufff5\024\024\025\050" +
    "\026\042\027\040\030\046\031\034\032\033\033\051\034" +
    "\031\035\044\036\036\044\045\045\037\047\ufff5\001\002" +
    "\000\062\002\uffff\011\uffff\012\uffff\013\026\014\041\015" +
    "\035\016\uffff\020\uffff\022\uffff\023\uffff\024\uffff\025\050" +
    "\026\042\027\040\030\046\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\044\045\045\037\047\uffff\001\002" +
    "\000\062\002\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\020\ufffd\022\ufffd\023\ufffd\024\ufffd\025\050" +
    "\026\042\027\040\030\046\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\044\045\045\037\047\ufffd\001\002" +
    "\000\062\002\ufff4\011\027\012\043\013\026\014\041\015" +
    "\035\016\ufff4\020\032\022\ufff4\023\ufff4\024\024\025\050" +
    "\026\042\027\040\030\046\031\034\032\033\033\051\034" +
    "\031\035\044\036\036\044\045\045\037\047\ufff4\001\002" +
    "\000\062\002\uffef\011\027\012\043\013\026\014\041\015" +
    "\035\016\uffef\020\uffef\022\uffef\023\uffef\024\uffef\025\050" +
    "\026\042\027\040\030\046\031\034\032\033\033\051\034" +
    "\031\035\044\036\036\044\045\045\037\047\uffef\001\002" +
    "\000\062\002\ufff1\011\027\012\043\013\026\014\041\015" +
    "\035\016\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025\050" +
    "\026\042\027\040\030\046\031\034\032\033\033\051\034" +
    "\031\035\044\036\036\044\045\045\037\047\ufff1\001\002" +
    "\000\004\002\001\001\002\000\062\002\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\044\ufff0" +
    "\045\ufff0\047\ufff0\001\002\000\062\002\ufffa\011\027\012" +
    "\043\013\026\014\041\015\035\016\ufffa\020\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\050\026\042\027\040\030\046\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\036\044\045" +
    "\045\037\047\ufffa\001\002\000\060\011\027\012\043\013" +
    "\026\014\041\015\035\016\047\020\032\022\025\023\030" +
    "\024\024\025\050\026\042\027\040\030\046\031\034\032" +
    "\033\033\051\034\031\035\044\036\036\044\045\045\037" +
    "\047\105\001\002\000\062\002\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\044\uffdd\045\uffdd" +
    "\047\uffdd\001\002\000\062\002\ufff6\011\027\012\043\013" +
    "\026\014\041\015\035\016\047\020\032\022\025\023\030" +
    "\024\024\025\050\026\042\027\040\030\046\031\034\032" +
    "\033\033\051\034\031\035\044\036\036\044\045\045\037" +
    "\047\ufff6\001\002\000\062\002\ufff7\011\027\012\043\013" +
    "\026\014\041\015\035\016\047\020\032\022\025\023\030" +
    "\024\024\025\050\026\042\027\040\030\046\031\034\032" +
    "\033\033\051\034\031\035\044\036\036\044\045\045\037" +
    "\047\ufff7\001\002\000\062\002\ufff8\011\027\012\043\013" +
    "\026\014\041\015\035\016\047\020\032\022\025\023\030" +
    "\024\024\025\050\026\042\027\040\030\046\031\034\032" +
    "\033\033\051\034\031\035\044\036\036\044\045\045\037" +
    "\047\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\006\002\015\003\016\001\001\000\004\003" +
    "\107\001\001\000\004\003\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\105\001\001\000\004\003" +
    "\103\001\001\000\004\003\102\001\001\000\002\001\001" +
    "\000\004\003\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\077\001\001\000\004" +
    "\003\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\076\001\001\000\004\003\075\001\001\000\004" +
    "\003\074\001\001\000\004\003\073\001\001\000\004\003" +
    "\072\001\001\000\004\003\071\001\001\000\004\003\070" +
    "\001\001\000\004\003\067\001\001\000\004\003\066\001" +
    "\001\000\004\003\065\001\001\000\004\003\064\001\001" +
    "\000\004\003\063\001\001\000\004\003\062\001\001\000" +
    "\004\003\061\001\001\000\004\003\060\001\001\000\004" +
    "\003\057\001\001\000\004\003\056\001\001\000\004\003" +
    "\055\001\001\000\004\003\054\001\001\000\004\003\053" +
    "\001\001\000\004\003\052\001\001\000\004\003\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ExpressionParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ExpressionParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ExpressionParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 	    lexer = new Lexer(new StringReader(expressionText)); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
		return lexer.next_token(); 
    }


	public Lexer lexer;
	private String expressionText;
	public Expression RESULT;

	public ExpressionParser(String expressionText) {
		this.symbolFactory = new DefaultSymbolFactory();
		this.expressionText = expressionText;
	}

	void setResult(Expression expression) {
		this.RESULT = expression;
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ExpressionParser$actions {
  private final ExpressionParser parser;

  /** Constructor */
  CUP$ExpressionParser$actions(ExpressionParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ExpressionParser$do_action(
    int                        CUP$ExpressionParser$act_num,
    java_cup.runtime.lr_parser CUP$ExpressionParser$parser,
    java.util.Stack            CUP$ExpressionParser$stack,
    int                        CUP$ExpressionParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ExpressionParser$result;

      /* select the action based on the action number */
      switch (CUP$ExpressionParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		 RESULT = e1; 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr COMMA expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new CommaExpression             (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr DOT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new DotExpression               (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new NameExpression      ((String)o);   
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new StringExpression    ((String)o);   
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new BooleanExpression   ((Boolean)o);  
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= DOUBLE_LITERAL 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Double o = (Double)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new DoubleExpression    ((Double)o);   
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new IntegerExpression   ((Integer)o);  
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr EQUALS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new EqualsExpression            (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr NOT_EQUALS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new NotEqualsExpression         (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr LESS_EQUAL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new LessOrEqualThanExpression   (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr LESS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new LessThanExpression          (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr GREATER_EQUAL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new GreaterOrEqualThanExpression(e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr GREATER expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new GreaterThanExpression       (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr MINUS_SET expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new MinusSetExpression          (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr INTERSECT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new IntersectExpression         (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr UNION expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new UnionExpression             (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr JOIN expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new JoinExpression              (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr WHERE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new WhereExpression             (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= BAG expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new BagExpression               (e1);     
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new NotExpression               (e1);     
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr IN expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new InExpression                (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr XOR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new XORExpression               (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new AndExpression               (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new OrExpression                (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= COUNT expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new CountExpression             (e1);     
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= AVG expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new AvgExpression               (e1);     
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= SUM expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new SumExpression               (e1);     
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= MIN expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new MinExpression               (e1);     
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= MAX expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new MaxExpression               (e1);     
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MODULO expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new ModuloExpression            (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr DIVIDE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new DivideExpression            (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr MULTIPLY expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new MultiplyExpression          (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new MinusExpression             (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = new PlusExpression              (e1, e2); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.peek()).value;
		 RESULT = e; parser.setResult(e); 
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          return CUP$ExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).right;
		Expression start_val = (Expression)((java_cup.runtime.Symbol) CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)).value;
		RESULT = start_val;
              CUP$ExpressionParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.elementAt(CUP$ExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$ExpressionParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ExpressionParser$parser.done_parsing();
          return CUP$ExpressionParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

