package edu.pjwstk.demo.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.DefaultSymbolFactory;
import java_cup.runtime.Symbol;
import edu.pjwstk.demo.expression.*;
import edu.pjwstk.demo.expression.terminal.*;
import edu.pjwstk.demo.expression.binary.*;

parser code {:
	public Lexer lexer;
	private String expressionText;
	public Expression RESULT;

	public ExpressionParser(String expressionText) {
		this.symbolFactory = new DefaultSymbolFactory();
		this.expressionText = expressionText;
	}

	void setResult(Expression expression) {
		this.RESULT = expression;
	}

:};

init with {: 	    lexer = new Lexer(new StringReader(expressionText)); :};
scan with {:		return lexer.next_token(); :};


terminal Integer INTEGER_LITERAL;
terminal Double  DOUBLE_LITERAL;
terminal Boolean BOOLEAN_LITERAL;

terminal String PLUS;
terminal String MINUS;
terminal String MULTIPLY;
terminal String DIVIDE;

terminal String AND;
terminal String OR;

terminal String LEFT_ROUND_BRACKET;
terminal String RIGHT_ROUND_BRACKET;

non terminal Expression goal;
non terminal Expression expr;


//priority
precedence left OR;
precedence left AND;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE;
precedence left LEFT_ROUND_BRACKET, RIGHT_ROUND_BRACKET;

start with goal;

goal ::= expr:e		{: RESULT = e; parser.setResult(e); :} ;

expr  ::=
		expr:e1 PLUS:o      expr:e2	{: RESULT = new PlusExpression(e1, e2);         :}
	| 	expr:e1 MINUS:o     expr:e2	{: RESULT = new MinusExpression(e1, e2);        :}
	| 	expr:e1 MULTIPLY:o 	expr:e2	{: RESULT = new MultiplyExpression(e1, e2);     :}
	| 	expr:e1 DIVIDE:o	expr:e2	{: RESULT = new DivideExpression(e1, e2);       :}
	| 	expr:e1 AND:o	    expr:e2	{: RESULT = new AndExpression(e1, e2);          :}
	| 	expr:e1 OR:o	    expr:e2	{: RESULT = new OrExpression(e1, e2);           :}
	| 	INTEGER_LITERAL:o           {: RESULT = new IntegerExpression((Integer)o);  :}
	| 	DOUBLE_LITERAL:o            {: RESULT = new DoubleExpression((Double)o);    :}
	| 	BOOLEAN_LITERAL:o           {: RESULT = new BooleanExpression((Boolean)o);  :}
	|	LEFT_ROUND_BRACKET:o expr:e1 RIGHT_ROUND_BRACKET {: RESULT = e1; :}
	;